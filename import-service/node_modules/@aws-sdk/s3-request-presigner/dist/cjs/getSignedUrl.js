"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getSignedUrl = void 0;
const protocol_http_1 = require("@aws-sdk/protocol-http");
const util_format_url_1 = require("@aws-sdk/util-format-url");
const presigner_1 = require("./presigner");
const getSignedUrl = async (client, command, options = {}) => {
    const s3Presigner = new presigner_1.S3RequestPresigner({ ...client.config });
    const presignInterceptMiddleware = (next, context) => async (args) => {
        var _a, _b;
        const { request } = args;
        if (!protocol_http_1.HttpRequest.isInstance(request)) {
            throw new Error("Request to be presigned is not an valid HTTP request.");
        }
        // Retry information headers are not meaningful in presigned URLs
        delete request.headers["amz-sdk-invocation-id"];
        delete request.headers["amz-sdk-request"];
        // User agent header would leak sensitive information
        delete request.headers["x-amz-user-agent"];
        const presigned = await s3Presigner.presign(request, {
            ...options,
            signingRegion: (_a = options.signingRegion) !== null && _a !== void 0 ? _a : context["signing_region"],
            signingService: (_b = options.signingService) !== null && _b !== void 0 ? _b : context["signing_service"],
        });
        return {
            // Intercept the middleware stack by returning fake response
            response: {},
            output: {
                $metadata: { httpStatusCode: 200 },
                presigned,
            },
        };
    };
    const middlewareName = "presignInterceptMiddleware";
    client.middlewareStack.addRelativeTo(presignInterceptMiddleware, {
        name: middlewareName,
        relation: "before",
        toMiddleware: "awsAuthMiddleware",
        override: true,
    });
    let presigned;
    try {
        const output = await client.send(command);
        //@ts-ignore the output is faked, so it's not actually OutputType
        presigned = output.presigned;
    }
    finally {
        client.middlewareStack.remove(middlewareName);
    }
    return util_format_url_1.formatUrl(presigned);
};
exports.getSignedUrl = getSignedUrl;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2V0U2lnbmVkVXJsLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2dldFNpZ25lZFVybC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSwwREFBcUQ7QUFHckQsOERBQXFEO0FBRXJELDJDQUFpRDtBQUUxQyxNQUFNLFlBQVksR0FBRyxLQUFLLEVBSy9CLE1BQXlELEVBQ3pELE9BQTZFLEVBQzdFLFVBQXNDLEVBQUUsRUFDdkIsRUFBRTtJQUNuQixNQUFNLFdBQVcsR0FBRyxJQUFJLDhCQUFrQixDQUFDLEVBQUUsR0FBRyxNQUFNLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQztJQUNqRSxNQUFNLDBCQUEwQixHQUM5QixDQUFDLElBQUksRUFBRSxPQUFPLEVBQUUsRUFBRSxDQUFDLEtBQUssRUFBRSxJQUFJLEVBQUUsRUFBRTs7UUFDaEMsTUFBTSxFQUFFLE9BQU8sRUFBRSxHQUFHLElBQUksQ0FBQztRQUN6QixJQUFJLENBQUMsMkJBQVcsQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLEVBQUU7WUFDcEMsTUFBTSxJQUFJLEtBQUssQ0FBQyx1REFBdUQsQ0FBQyxDQUFDO1NBQzFFO1FBQ0QsaUVBQWlFO1FBQ2pFLE9BQU8sT0FBTyxDQUFDLE9BQU8sQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDO1FBQ2hELE9BQU8sT0FBTyxDQUFDLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO1FBQzFDLHFEQUFxRDtRQUNyRCxPQUFPLE9BQU8sQ0FBQyxPQUFPLENBQUMsa0JBQWtCLENBQUMsQ0FBQztRQUUzQyxNQUFNLFNBQVMsR0FBRyxNQUFNLFdBQVcsQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFO1lBQ25ELEdBQUcsT0FBTztZQUNWLGFBQWEsRUFBRSxNQUFBLE9BQU8sQ0FBQyxhQUFhLG1DQUFJLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQztZQUNqRSxjQUFjLEVBQUUsTUFBQSxPQUFPLENBQUMsY0FBYyxtQ0FBSSxPQUFPLENBQUMsaUJBQWlCLENBQUM7U0FDckUsQ0FBQyxDQUFDO1FBQ0gsT0FBTztZQUNMLDREQUE0RDtZQUM1RCxRQUFRLEVBQUUsRUFBRTtZQUNaLE1BQU0sRUFBRTtnQkFDTixTQUFTLEVBQUUsRUFBRSxjQUFjLEVBQUUsR0FBRyxFQUFFO2dCQUNsQyxTQUFTO2FBQ1Y7U0FDSyxDQUFDO0lBQ1gsQ0FBQyxDQUFDO0lBQ0osTUFBTSxjQUFjLEdBQUcsNEJBQTRCLENBQUM7SUFDcEQsTUFBTSxDQUFDLGVBQWUsQ0FBQyxhQUFhLENBQUMsMEJBQTBCLEVBQUU7UUFDL0QsSUFBSSxFQUFFLGNBQWM7UUFDcEIsUUFBUSxFQUFFLFFBQVE7UUFDbEIsWUFBWSxFQUFFLG1CQUFtQjtRQUNqQyxRQUFRLEVBQUUsSUFBSTtLQUNmLENBQUMsQ0FBQztJQUVILElBQUksU0FBc0IsQ0FBQztJQUMzQixJQUFJO1FBQ0YsTUFBTSxNQUFNLEdBQUcsTUFBTSxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQzFDLGlFQUFpRTtRQUNqRSxTQUFTLEdBQUcsTUFBTSxDQUFDLFNBQVMsQ0FBQztLQUM5QjtZQUFTO1FBQ1IsTUFBTSxDQUFDLGVBQWUsQ0FBQyxNQUFNLENBQUMsY0FBYyxDQUFDLENBQUM7S0FDL0M7SUFFRCxPQUFPLDJCQUFTLENBQUMsU0FBUyxDQUFDLENBQUM7QUFDOUIsQ0FBQyxDQUFDO0FBdERXLFFBQUEsWUFBWSxnQkFzRHZCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSHR0cFJlcXVlc3QgfSBmcm9tIFwiQGF3cy1zZGsvcHJvdG9jb2wtaHR0cFwiO1xuaW1wb3J0IHsgQ2xpZW50LCBDb21tYW5kIH0gZnJvbSBcIkBhd3Mtc2RrL3NtaXRoeS1jbGllbnRcIjtcbmltcG9ydCB7IEJ1aWxkTWlkZGxld2FyZSwgTWV0YWRhdGFCZWFyZXIsIFJlcXVlc3RQcmVzaWduaW5nQXJndW1lbnRzIH0gZnJvbSBcIkBhd3Mtc2RrL3R5cGVzXCI7XG5pbXBvcnQgeyBmb3JtYXRVcmwgfSBmcm9tIFwiQGF3cy1zZGsvdXRpbC1mb3JtYXQtdXJsXCI7XG5cbmltcG9ydCB7IFMzUmVxdWVzdFByZXNpZ25lciB9IGZyb20gXCIuL3ByZXNpZ25lclwiO1xuXG5leHBvcnQgY29uc3QgZ2V0U2lnbmVkVXJsID0gYXN5bmMgPFxuICBJbnB1dFR5cGVzVW5pb24gZXh0ZW5kcyBvYmplY3QsXG4gIElucHV0VHlwZSBleHRlbmRzIElucHV0VHlwZXNVbmlvbixcbiAgT3V0cHV0VHlwZSBleHRlbmRzIE1ldGFkYXRhQmVhcmVyID0gTWV0YWRhdGFCZWFyZXJcbj4oXG4gIGNsaWVudDogQ2xpZW50PGFueSwgSW5wdXRUeXBlc1VuaW9uLCBNZXRhZGF0YUJlYXJlciwgYW55PixcbiAgY29tbWFuZDogQ29tbWFuZDxJbnB1dFR5cGUsIE91dHB1dFR5cGUsIGFueSwgSW5wdXRUeXBlc1VuaW9uLCBNZXRhZGF0YUJlYXJlcj4sXG4gIG9wdGlvbnM6IFJlcXVlc3RQcmVzaWduaW5nQXJndW1lbnRzID0ge31cbik6IFByb21pc2U8c3RyaW5nPiA9PiB7XG4gIGNvbnN0IHMzUHJlc2lnbmVyID0gbmV3IFMzUmVxdWVzdFByZXNpZ25lcih7IC4uLmNsaWVudC5jb25maWcgfSk7XG4gIGNvbnN0IHByZXNpZ25JbnRlcmNlcHRNaWRkbGV3YXJlOiBCdWlsZE1pZGRsZXdhcmU8SW5wdXRUeXBlc1VuaW9uLCBNZXRhZGF0YUJlYXJlcj4gPVxuICAgIChuZXh0LCBjb250ZXh0KSA9PiBhc3luYyAoYXJncykgPT4ge1xuICAgICAgY29uc3QgeyByZXF1ZXN0IH0gPSBhcmdzO1xuICAgICAgaWYgKCFIdHRwUmVxdWVzdC5pc0luc3RhbmNlKHJlcXVlc3QpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIlJlcXVlc3QgdG8gYmUgcHJlc2lnbmVkIGlzIG5vdCBhbiB2YWxpZCBIVFRQIHJlcXVlc3QuXCIpO1xuICAgICAgfVxuICAgICAgLy8gUmV0cnkgaW5mb3JtYXRpb24gaGVhZGVycyBhcmUgbm90IG1lYW5pbmdmdWwgaW4gcHJlc2lnbmVkIFVSTHNcbiAgICAgIGRlbGV0ZSByZXF1ZXN0LmhlYWRlcnNbXCJhbXotc2RrLWludm9jYXRpb24taWRcIl07XG4gICAgICBkZWxldGUgcmVxdWVzdC5oZWFkZXJzW1wiYW16LXNkay1yZXF1ZXN0XCJdO1xuICAgICAgLy8gVXNlciBhZ2VudCBoZWFkZXIgd291bGQgbGVhayBzZW5zaXRpdmUgaW5mb3JtYXRpb25cbiAgICAgIGRlbGV0ZSByZXF1ZXN0LmhlYWRlcnNbXCJ4LWFtei11c2VyLWFnZW50XCJdO1xuXG4gICAgICBjb25zdCBwcmVzaWduZWQgPSBhd2FpdCBzM1ByZXNpZ25lci5wcmVzaWduKHJlcXVlc3QsIHtcbiAgICAgICAgLi4ub3B0aW9ucyxcbiAgICAgICAgc2lnbmluZ1JlZ2lvbjogb3B0aW9ucy5zaWduaW5nUmVnaW9uID8/IGNvbnRleHRbXCJzaWduaW5nX3JlZ2lvblwiXSxcbiAgICAgICAgc2lnbmluZ1NlcnZpY2U6IG9wdGlvbnMuc2lnbmluZ1NlcnZpY2UgPz8gY29udGV4dFtcInNpZ25pbmdfc2VydmljZVwiXSxcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgLy8gSW50ZXJjZXB0IHRoZSBtaWRkbGV3YXJlIHN0YWNrIGJ5IHJldHVybmluZyBmYWtlIHJlc3BvbnNlXG4gICAgICAgIHJlc3BvbnNlOiB7fSxcbiAgICAgICAgb3V0cHV0OiB7XG4gICAgICAgICAgJG1ldGFkYXRhOiB7IGh0dHBTdGF0dXNDb2RlOiAyMDAgfSxcbiAgICAgICAgICBwcmVzaWduZWQsXG4gICAgICAgIH0sXG4gICAgICB9IGFzIGFueTtcbiAgICB9O1xuICBjb25zdCBtaWRkbGV3YXJlTmFtZSA9IFwicHJlc2lnbkludGVyY2VwdE1pZGRsZXdhcmVcIjtcbiAgY2xpZW50Lm1pZGRsZXdhcmVTdGFjay5hZGRSZWxhdGl2ZVRvKHByZXNpZ25JbnRlcmNlcHRNaWRkbGV3YXJlLCB7XG4gICAgbmFtZTogbWlkZGxld2FyZU5hbWUsXG4gICAgcmVsYXRpb246IFwiYmVmb3JlXCIsXG4gICAgdG9NaWRkbGV3YXJlOiBcImF3c0F1dGhNaWRkbGV3YXJlXCIsXG4gICAgb3ZlcnJpZGU6IHRydWUsXG4gIH0pO1xuXG4gIGxldCBwcmVzaWduZWQ6IEh0dHBSZXF1ZXN0O1xuICB0cnkge1xuICAgIGNvbnN0IG91dHB1dCA9IGF3YWl0IGNsaWVudC5zZW5kKGNvbW1hbmQpO1xuICAgIC8vQHRzLWlnbm9yZSB0aGUgb3V0cHV0IGlzIGZha2VkLCBzbyBpdCdzIG5vdCBhY3R1YWxseSBPdXRwdXRUeXBlXG4gICAgcHJlc2lnbmVkID0gb3V0cHV0LnByZXNpZ25lZDtcbiAgfSBmaW5hbGx5IHtcbiAgICBjbGllbnQubWlkZGxld2FyZVN0YWNrLnJlbW92ZShtaWRkbGV3YXJlTmFtZSk7XG4gIH1cblxuICByZXR1cm4gZm9ybWF0VXJsKHByZXNpZ25lZCk7XG59O1xuIl19