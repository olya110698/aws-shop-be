import { __assign, __awaiter, __generator, __rest } from "tslib";
import { S3SignatureV4 } from "@aws-sdk/middleware-sdk-s3";
import { SHA256_HEADER, UNSIGNED_PAYLOAD } from "./constants";
var S3RequestPresigner = /** @class */ (function () {
    function S3RequestPresigner(options) {
        var resolvedOptions = __assign({ 
            // Allow `signingName` because we want to support usecase of supply client's resolved config
            // directly. Where service equals signingName.
            service: options.signingName || options.service || "s3", uriEscapePath: options.uriEscapePath || false, applyChecksum: options.applyChecksum || false }, options);
        this.signer = new S3SignatureV4(resolvedOptions);
    }
    S3RequestPresigner.prototype.presign = function (requestToSign, _a) {
        if (_a === void 0) { _a = {}; }
        var _b = _a.unsignableHeaders, unsignableHeaders = _b === void 0 ? new Set() : _b, _c = _a.unhoistableHeaders, unhoistableHeaders = _c === void 0 ? new Set() : _c, options = __rest(_a, ["unsignableHeaders", "unhoistableHeaders"]);
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_d) {
                unsignableHeaders.add("content-type");
                // S3 requires SSE headers to be signed in headers instead of query
                // See: https://github.com/aws/aws-sdk-js-v3/issues/1576
                Object.keys(requestToSign.headers)
                    .map(function (header) { return header.toLowerCase(); })
                    .filter(function (header) { return header.startsWith("x-amz-server-side-encryption"); })
                    .forEach(function (header) {
                    unhoistableHeaders.add(header);
                });
                requestToSign.headers[SHA256_HEADER] = UNSIGNED_PAYLOAD;
                if (!requestToSign.headers["host"]) {
                    requestToSign.headers.host = requestToSign.hostname;
                    if (requestToSign.port) {
                        requestToSign.headers.host = requestToSign.headers.host + ":" + requestToSign.port;
                    }
                }
                return [2 /*return*/, this.signer.presign(requestToSign, __assign({ expiresIn: 900, unsignableHeaders: unsignableHeaders, unhoistableHeaders: unhoistableHeaders }, options))];
            });
        });
    };
    return S3RequestPresigner;
}());
export { S3RequestPresigner };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJlc2lnbmVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3ByZXNpZ25lci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLGFBQWEsRUFBa0IsTUFBTSw0QkFBNEIsQ0FBQztBQUkzRSxPQUFPLEVBQUUsYUFBYSxFQUFFLGdCQUFnQixFQUFFLE1BQU0sYUFBYSxDQUFDO0FBUTlEO0lBRUUsNEJBQVksT0FBa0M7UUFDNUMsSUFBTSxlQUFlO1lBQ25CLDRGQUE0RjtZQUM1Riw4Q0FBOEM7WUFDOUMsT0FBTyxFQUFFLE9BQU8sQ0FBQyxXQUFXLElBQUksT0FBTyxDQUFDLE9BQU8sSUFBSSxJQUFJLEVBQ3ZELGFBQWEsRUFBRSxPQUFPLENBQUMsYUFBYSxJQUFJLEtBQUssRUFDN0MsYUFBYSxFQUFFLE9BQU8sQ0FBQyxhQUFhLElBQUksS0FBSyxJQUMxQyxPQUFPLENBQ1gsQ0FBQztRQUNGLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxhQUFhLENBQUMsZUFBZSxDQUFDLENBQUM7SUFDbkQsQ0FBQztJQUVZLG9DQUFPLEdBQXBCLFVBQ0UsYUFBMkIsRUFDM0IsRUFBOEc7UUFBOUcsbUJBQUEsRUFBQSxPQUE4RztRQUE1RyxJQUFBLHlCQUE2QixFQUE3QixpQkFBaUIsbUJBQUcsSUFBSSxHQUFHLEVBQUUsS0FBQSxFQUFFLDBCQUE4QixFQUE5QixrQkFBa0IsbUJBQUcsSUFBSSxHQUFHLEVBQUUsS0FBQSxFQUFLLE9BQU8sY0FBM0UsMkNBQTZFLENBQUY7OztnQkFFM0UsaUJBQWlCLENBQUMsR0FBRyxDQUFDLGNBQWMsQ0FBQyxDQUFDO2dCQUN0QyxtRUFBbUU7Z0JBQ25FLHdEQUF3RDtnQkFDeEQsTUFBTSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDO3FCQUMvQixHQUFHLENBQUMsVUFBQyxNQUFNLElBQUssT0FBQSxNQUFNLENBQUMsV0FBVyxFQUFFLEVBQXBCLENBQW9CLENBQUM7cUJBQ3JDLE1BQU0sQ0FBQyxVQUFDLE1BQU0sSUFBSyxPQUFBLE1BQU0sQ0FBQyxVQUFVLENBQUMsOEJBQThCLENBQUMsRUFBakQsQ0FBaUQsQ0FBQztxQkFDckUsT0FBTyxDQUFDLFVBQUMsTUFBTTtvQkFDZCxrQkFBa0IsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUM7Z0JBQ2pDLENBQUMsQ0FBQyxDQUFDO2dCQUNMLGFBQWEsQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLEdBQUcsZ0JBQWdCLENBQUM7Z0JBQ3hELElBQUksQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxFQUFFO29CQUNsQyxhQUFhLENBQUMsT0FBTyxDQUFDLElBQUksR0FBRyxhQUFhLENBQUMsUUFBUSxDQUFDO29CQUNwRCxJQUFJLGFBQWEsQ0FBQyxJQUFJLEVBQUU7d0JBQ3RCLGFBQWEsQ0FBQyxPQUFPLENBQUMsSUFBSSxHQUFNLGFBQWEsQ0FBQyxPQUFPLENBQUMsSUFBSSxTQUFJLGFBQWEsQ0FBQyxJQUFNLENBQUM7cUJBQ3BGO2lCQUNGO2dCQUNELHNCQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLGFBQWEsYUFDdEMsU0FBUyxFQUFFLEdBQUcsRUFDZCxpQkFBaUIsbUJBQUEsRUFDakIsa0JBQWtCLG9CQUFBLElBQ2YsT0FBTyxFQUNWLEVBQUM7OztLQUNKO0lBQ0gseUJBQUM7QUFBRCxDQUFDLEFBekNELElBeUNDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUzNTaWduYXR1cmVWNCwgUzNTaWduZXJWNEluaXQgfSBmcm9tIFwiQGF3cy1zZGsvbWlkZGxld2FyZS1zZGstczNcIjtcbmltcG9ydCB7IFJlcXVlc3RQcmVzaWduZXIsIFJlcXVlc3RQcmVzaWduaW5nQXJndW1lbnRzIH0gZnJvbSBcIkBhd3Mtc2RrL3R5cGVzXCI7XG5pbXBvcnQgeyBIdHRwUmVxdWVzdCBhcyBJSHR0cFJlcXVlc3QgfSBmcm9tIFwiQGF3cy1zZGsvdHlwZXNcIjtcblxuaW1wb3J0IHsgU0hBMjU2X0hFQURFUiwgVU5TSUdORURfUEFZTE9BRCB9IGZyb20gXCIuL2NvbnN0YW50c1wiO1xuXG50eXBlIFBhcnRpYWxCeTxULCBLIGV4dGVuZHMga2V5b2YgVD4gPSBPbWl0PFQsIEs+ICYgUGFydGlhbDxQaWNrPFQsIEs+PjtcblxuZXhwb3J0IHR5cGUgUzNSZXF1ZXN0UHJlc2lnbmVyT3B0aW9ucyA9IFBhcnRpYWxCeTxTM1NpZ25lclY0SW5pdCwgXCJzZXJ2aWNlXCIgfCBcInVyaUVzY2FwZVBhdGhcIj4gJiB7XG4gIHNpZ25pbmdOYW1lPzogc3RyaW5nO1xufTtcblxuZXhwb3J0IGNsYXNzIFMzUmVxdWVzdFByZXNpZ25lciBpbXBsZW1lbnRzIFJlcXVlc3RQcmVzaWduZXIge1xuICBwcml2YXRlIHJlYWRvbmx5IHNpZ25lcjogUzNTaWduYXR1cmVWNDtcbiAgY29uc3RydWN0b3Iob3B0aW9uczogUzNSZXF1ZXN0UHJlc2lnbmVyT3B0aW9ucykge1xuICAgIGNvbnN0IHJlc29sdmVkT3B0aW9ucyA9IHtcbiAgICAgIC8vIEFsbG93IGBzaWduaW5nTmFtZWAgYmVjYXVzZSB3ZSB3YW50IHRvIHN1cHBvcnQgdXNlY2FzZSBvZiBzdXBwbHkgY2xpZW50J3MgcmVzb2x2ZWQgY29uZmlnXG4gICAgICAvLyBkaXJlY3RseS4gV2hlcmUgc2VydmljZSBlcXVhbHMgc2lnbmluZ05hbWUuXG4gICAgICBzZXJ2aWNlOiBvcHRpb25zLnNpZ25pbmdOYW1lIHx8IG9wdGlvbnMuc2VydmljZSB8fCBcInMzXCIsXG4gICAgICB1cmlFc2NhcGVQYXRoOiBvcHRpb25zLnVyaUVzY2FwZVBhdGggfHwgZmFsc2UsXG4gICAgICBhcHBseUNoZWNrc3VtOiBvcHRpb25zLmFwcGx5Q2hlY2tzdW0gfHwgZmFsc2UsXG4gICAgICAuLi5vcHRpb25zLFxuICAgIH07XG4gICAgdGhpcy5zaWduZXIgPSBuZXcgUzNTaWduYXR1cmVWNChyZXNvbHZlZE9wdGlvbnMpO1xuICB9XG5cbiAgcHVibGljIGFzeW5jIHByZXNpZ24oXG4gICAgcmVxdWVzdFRvU2lnbjogSUh0dHBSZXF1ZXN0LFxuICAgIHsgdW5zaWduYWJsZUhlYWRlcnMgPSBuZXcgU2V0KCksIHVuaG9pc3RhYmxlSGVhZGVycyA9IG5ldyBTZXQoKSwgLi4ub3B0aW9ucyB9OiBSZXF1ZXN0UHJlc2lnbmluZ0FyZ3VtZW50cyA9IHt9XG4gICk6IFByb21pc2U8SUh0dHBSZXF1ZXN0PiB7XG4gICAgdW5zaWduYWJsZUhlYWRlcnMuYWRkKFwiY29udGVudC10eXBlXCIpO1xuICAgIC8vIFMzIHJlcXVpcmVzIFNTRSBoZWFkZXJzIHRvIGJlIHNpZ25lZCBpbiBoZWFkZXJzIGluc3RlYWQgb2YgcXVlcnlcbiAgICAvLyBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9hd3MvYXdzLXNkay1qcy12My9pc3N1ZXMvMTU3NlxuICAgIE9iamVjdC5rZXlzKHJlcXVlc3RUb1NpZ24uaGVhZGVycylcbiAgICAgIC5tYXAoKGhlYWRlcikgPT4gaGVhZGVyLnRvTG93ZXJDYXNlKCkpXG4gICAgICAuZmlsdGVyKChoZWFkZXIpID0+IGhlYWRlci5zdGFydHNXaXRoKFwieC1hbXotc2VydmVyLXNpZGUtZW5jcnlwdGlvblwiKSlcbiAgICAgIC5mb3JFYWNoKChoZWFkZXIpID0+IHtcbiAgICAgICAgdW5ob2lzdGFibGVIZWFkZXJzLmFkZChoZWFkZXIpO1xuICAgICAgfSk7XG4gICAgcmVxdWVzdFRvU2lnbi5oZWFkZXJzW1NIQTI1Nl9IRUFERVJdID0gVU5TSUdORURfUEFZTE9BRDtcbiAgICBpZiAoIXJlcXVlc3RUb1NpZ24uaGVhZGVyc1tcImhvc3RcIl0pIHtcbiAgICAgIHJlcXVlc3RUb1NpZ24uaGVhZGVycy5ob3N0ID0gcmVxdWVzdFRvU2lnbi5ob3N0bmFtZTtcbiAgICAgIGlmIChyZXF1ZXN0VG9TaWduLnBvcnQpIHtcbiAgICAgICAgcmVxdWVzdFRvU2lnbi5oZWFkZXJzLmhvc3QgPSBgJHtyZXF1ZXN0VG9TaWduLmhlYWRlcnMuaG9zdH06JHtyZXF1ZXN0VG9TaWduLnBvcnR9YDtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuc2lnbmVyLnByZXNpZ24ocmVxdWVzdFRvU2lnbiwge1xuICAgICAgZXhwaXJlc0luOiA5MDAsXG4gICAgICB1bnNpZ25hYmxlSGVhZGVycyxcbiAgICAgIHVuaG9pc3RhYmxlSGVhZGVycyxcbiAgICAgIC4uLm9wdGlvbnMsXG4gICAgfSk7XG4gIH1cbn1cbiJdfQ==