service: "import-service"

frameworkVersion: "2"
useDotenv: true

custom:
  webpack:
    webpackConfig: "./webpack.config.js"
    includeModules: true
  dotenv:
    required:
      file: true

plugins:
  - serverless-webpack
  - serverless-dotenv-plugin
package:
  individually: true

provider:
  name: aws
  runtime: nodejs14.x
  lambdaHashingVersion: 20201221
  stage: dev
  region: eu-west-1
  apiGateway:
    minimumCompressionSize: 1024
    shouldStartNameWithService: true
  environment:
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    BUCKET: ${env:BUCKET}
    SQS_URL: !ImportValue SQSQueueLink
    SQS_ARN: !ImportValue SQSQueueArn

  iam:
    role:
      statements:
        - Effect: Allow
          Action: s3:ListBucket
          Resource:
            - arn:aws:s3:::${env:BUCKET}

        - Effect: Allow
          Action:
            - s3:*
          Resource:
            - arn:aws:s3:::${env:BUCKET}/*

        - Effect: Allow
          Action: sqs:*
          Resource:
            - !ImportValue SQSQueueArn

  s3:
    bucketOne:
      name: ${env:BUCKET}
      corsConfiguration:
        CorsRules:
          - AllowedMethods:
              - GET
              - PUT
              - DELETE
            AllowedOrigins:
              - "*"
            AllowedHeaders:
              - "*"

functions:
  importProductsFile:
    handler: functions/importProductsFile/importProductsFile.handler
    events:
      - http:
          path: /import
          method: get
          cors: true
          authorizer:
            name: basicAuthorizer
            type: TOKEN
            arn: !ImportValue BasicAuthorizerArn
            identitySource: method.request.header.Authorization
          request:
            parameters:
              querystrings:
                name: true

  importFileParser:
    handler: functions/importFileParser/importFileParser.handler
    events:
      - s3: bucketOne
        event: s3:ObjectCreated:*
        rules:
          - prefix: uploaded/
          - suffix: .csv

resources:
  Resources:
    RestApi:
      Type: AWS::ApiGateway::RestApi
      Properties:
        Name: aws-shop
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_4XX
        RestApiId: !Ref RestApi

    GatewayResponseUnauthorized:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: UNAUTHORIZED
        RestApiId: !Ref RestApi

    GatewayResponseDefault5XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_5XX
        RestApiId: !Ref RestApi
