service: "product-service"

frameworkVersion: "2"
useDotenv: true

custom:
  webpack:
    webpackConfig: "./webpack.config.js"
    includeModules: true

plugins:
  - serverless-webpack

package:
  individually: true

provider:
  name: aws
  runtime: nodejs14.x
  lambdaHashingVersion: 20201221
  stage: dev
  region: eu-west-1
  apiGateway:
    minimumCompressionSize: 1024
    shouldStartNameWithService: true
  environment:
    PG_HOST: ${env:PG_HOST}
    PG_PORT: ${env:PG_PORT}
    PG_DATABASE: ${env:PG_DATABASE}
    PG_USERNAME: ${env:PG_USERNAME}
    PG_PASSWORD: ${env:PG_PASSWORD}
    LOW_PRICE_LIMIT: ${env:LOW_PRICE_LIMIT}
    HIGHT_PRICE: ${env:HIGHT_PRICE}
    LOW_PRICE: ${env:LOW_PRICE}
    SQSQueueName: ${env:SQSQueueName}
    SNSTopicName: ${env:SNSTopicName}
    BATCH_SQS_SIZE: ${env:BATCH_SQS_SIZE}
    SQS_URL:
      Ref: SQSQueue
    SNS_ARN:
      Ref: SNSTopic

  iam:
    role:
      statements:
        - Effect: Allow
          Action: sqs:*
          Resource:
            Fn::GetAtt:
              - SQSQueue
              - Arn

        - Effect: Allow
          Action: sns:*
          Resource:
            Ref: SNSTopic

resources:
  Resources:
    SQSQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${env:SQSQueueName}

    SNSTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: ${env:SNSTopicName}

    SNSSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        Endpoint: ${env:SNS_MAIL_LOW}
        Protocol: email
        TopicArn:
          Ref: SNSTopic
        FilterPolicy:
          Price:
            - ${env:LOW_PRICE}

    SNSFinishParsingSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        Endpoint: ${env:SNS_MAIL_HIGHT}
        Protocol: email
        TopicArn:
          Ref: SNSTopic
        FilterPolicy:
          Price:
            - ${env:HIGHT_PRICE}

outputs:
  SQSQueueLink:
    Value:
      Ref: SQSQueue
  SQSQueueArn:
    Value:
      Fn::GetAtt:
        - SQSQueue
        - Arn

functions:
  getProductsList:
    handler: functions/getProductsList/getProductsList.handler
    events:
      - http:
          path: products
          method: get
          cors: true

  getProductsById:
    handler: functions/getProductsById/getProductsById.handler
    events:
      - http:
          path: products/{productId}
          method: get
          cors: true

  createProduct:
    handler: functions/createProduct/createProduct.handler
    events:
      - http:
          path: products
          method: post
          cors: true

  deleteProduct:
    handler: functions/deleteProduct/deleteProduct.handler
    events:
      - http:
          path: delete/{productId}
          method: get
          cors: true

  catalogBatchProcess:
    handler: functions/catalogBatchProcess/catalogBatchProcess.handler
    events:
      - sqs:
          batchSize: ${env:BATCH_SQS_SIZE}
          arn:
            Fn::GetAtt:
              - SQSQueue
              - Arn
