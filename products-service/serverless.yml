# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: products-service
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: "2"
useDotenv: true

custom: 
  webpack: 
    webpackConfig: './webpack.config.js'
    includeModules: true

plugins: 
  - serverless-webpack 


package:
  individually: true



provider:
  name: aws
  runtime: nodejs14.x
  lambdaHashingVersion: 20201221
  stage: dev
  region: eu-west-1
   apiGateway: 
    minimumCompressionSize: 1024
    shouldStartNameWithService: true
  environment:
    PG_HOST: ${env:PG_HOST}
    PG_PORT: ${env:PG_PORT}
    PG_DATABASE: ${env:PG_DATABASE}
    PG_USERNAME: ${env:PG_USERNAME}
    PG_PASSWORD: ${env:PG_PASSWORD}
     LOW_PRICE_LIMIT: ${env:LOW_PRICE_LIMIT}
    HIGHT_PRICE: ${env:HIGHT_PRICE}
    LOW_PRICE: ${env:LOW_PRICE}
    SQSQueueName: ${env:SQSQueueName}
    SNSTopicName: ${env:SNSTopicName}
    BATCH_SQS_SIZE: ${env:BATCH_SQS_SIZE}
    SQS_URL:
      Ref: SQSQueue
    SNS_ARN:
      Ref: SNSTopic

 iam:
    role:
      statements:
        - Effect: Allow
          Action: sqs:*
          Resource:
            Fn::GetAtt:
              - SQSQueue
              - Arn

        - Effect: Allow
          Action: sns:*
          Resource:
            Ref: SNSTopic

resources:
  Resources:
    SQSQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${env:SQSQueueName}
    
    SNSTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: ${env:SNSTopicName}

    SNSSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        Endpoint: ${env:SNS_MAIL_LOW}
        Protocol: email
        TopicArn:
          Ref: SNSTopic
        FilterPolicy:
          Price: 
            - ${env:LOW_PRICE}

    SNSFinishParsingSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        Endpoint: ${env:SNS_MAIL_HIGHT}
        Protocol: email
        TopicArn:
          Ref: SNSTopic
        FilterPolicy:
          Price: 
            - ${env:HIGHT_PRICE}

outputs: 
  SQSQueueLink:
    Value:
      Ref: SQSQueue
  SQSQueueArn:
    Value:
      Fn::GetAtt:
        - SQSQueue
        - Arn

# you can add packaging information here
#  patterns:
#    - '!exclude-me.js'
#    - '!exclude-me-dir/**'
#    - include-me.js
#    - include-me-dir/**

functions:
  getProductsList:
    handler: functions/getProductsList/getProductsList.handler
    events:
      - http:
          path: products
          method: get
          cors: true

  getProductsById:
    handler: functions/getProductsById/getProductsById.handler
    events:
      - http:
          path: products/{productId}
          method: get
          cors: true

  createProduct:
    handler: functions/createProduct/createProduct.handler
    events:
      - http:
          path: products
          method: post
          cors: true

  catalogBatchProcess:
    handler: functions/catalogBatchProcess/catalogBatchProcess.handler
    events:
     - sqs:
         batchSize: ${env:BATCH_SQS_SIZE}
         arn:
           Fn::GetAtt:
             - SQSQueue
             - Arn
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - httpApi:
#          path: /users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
